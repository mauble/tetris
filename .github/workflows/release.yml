name: Release

on:
  push:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: tetris

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Rust
        uses: actions/setup-rust@v1
        with:
          rust-version: stable

      - name: Extract version from Cargo.toml
        id: version
        run: |
          VERSION=$(grep '^version' Cargo.toml | head -n1 | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version is $VERSION"

      - name: Check if release already exists
        id: check-release
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          EXISTS=$(gh release view "v$VERSION" --json tagName --jq .tagName || echo "none")
          echo "exists=$EXISTS" >> $GITHUB_OUTPUT
          echo "Existing release: $EXISTS"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Conditionally create release
        id: set-release
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          EXISTS="${{ steps.check-release.outputs.exists }}"

          if [ "$EXISTS" = "none" ]; then
            echo "Creating release for version $VERSION"
            gh release create "v$VERSION" --title "v$VERSION" --notes "Automated release for version $VERSION"
            echo "created=true" >> $GITHUB_OUTPUT
          else
            echo "Release v$VERSION already exists. Skipping."
            echo "created=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-upload:
    needs: release
    if: needs.release.outputs.release_created == 'true'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: tetris-linux
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: tetris-windows.exe

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions/setup-rust@v1
        with:
          rust-version: stable
          targets: ${{ matrix.target }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Rename and upload artifact
        run: |
          mkdir dist
          cp target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}* dist/${{ matrix.artifact_name }}
        shell: bash

      - name: Upload release asset
        run: |
          gh release upload "v${{ needs.release.outputs.version }}" dist/${{ matrix.artifact_name }}#${{ matrix.artifact_name }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
